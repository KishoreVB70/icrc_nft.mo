type Value__2 = 
 variant {
   Array: vec Value__2;
   Blob: blob;
   Int: int;
   Map: vec record {
              text;
              Value__2;
            };
   Nat: nat;
   Text: text;
 };
type Value__1 = 
 variant {
   Array: vec Value__1;
   Blob: blob;
   Int: int;
   Map: vec record {
              text;
              Value__1;
            };
   Nat: nat;
   Text: text;
 };
type Value = 
 variant {
   Array: vec Value__1;
   Blob: blob;
   Int: int;
   Map: vec record {
              text;
              Value__1;
            };
   Nat: nat;
   Text: text;
 };
type UserProfile = 
 record {
   account: Account__2;
   email: text;
   image: text;
   name: text;
 };
type TransferResult = 
 variant {
   Err: TransferError;
   Ok: nat;
 };
type TransferError = 
 variant {
   CreatedInFuture: record {ledger_time: nat64;};
   Duplicate: record {duplicate_of: nat;};
   GenericBatchError: record {
                        error_code: nat;
                        message: text;
                      };
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InvalidRecipient;
   NonExistingTokenId;
   TooOld;
   Unauthorized;
 };
type TransferArgs = 
 record {
   created_at_time: opt nat64;
   from_subaccount: opt blob;
   memo: opt blob;
   to: Account__1;
   token_id: nat;
 };
type TransactionRange__1 = 
 record {
   length: nat;
   start: nat;
 };
type TransactionRange = 
 record {
   length: nat;
   start: nat;
 };
type Tip = 
 record {
   hash_tree: blob;
   last_block_hash: blob;
   last_block_index: blob;
 };
type SupportedStandards = 
 vec record {
       name: text;
       url: text;
     };
type Subaccount = blob;
type StringResult = 
 variant {
   err: text;
   ok: text;
 };
type Soodio = 
 service {
   add_authorized_principals: (vec principal) -> (BoolResult);
   burn_nft: (nat) -> (BoolResult);
   change_library: (Account, LibraryID__1, nat) -> (BoolResult);
   create_library: (CreateLibraryRequest) -> (StringResult);
   create_user: (Account, CreateUserRequest) -> (StringResult);
   get_authorized_principals: () -> (PrincipalsResult);
   get_libraries: (vec LibraryID__1) -> (vec Library) query;
   get_owner: () -> (principal) query;
   get_tip: () -> (Tip) query;
   get_user_id: (Account) -> (StringResult) query;
   get_user_libraries: (Account) -> (vec Library) query;
   get_user_library_ids: (Account) -> (vec LibraryID__1) query;
   get_user_nft_metadatas: (Account) ->
    (vec opt vec record {
                   text;
                   Value;
                 }) query;
   get_users_from_accounts: (vec Account) -> (vec UserProfile) query;
   get_users_from_ids: (vec text) -> (vec UserProfile) query;
   icrc10_supported_standards: () -> (SupportedStandards) query;
   icrc3_get_archives: (GetArchivesArgs) -> (GetArchivesResult) query;
   icrc3_get_blocks: (vec TransactionRange) -> (GetTransactionsResult) query;
   icrc3_get_tip_certificate: () -> (opt DataCertificate) query;
   icrc3_supported_block_types: () -> (vec BlockType) query;
   icrc7_atomic_batch_transfers: () -> (opt bool) query;
   icrc7_balance_of: (BalanceOfRequest) -> (BalanceOfResponse) query;
   icrc7_collection_metadata: () -> (vec record {
                                           text;
                                           Value;
                                         }) query;
   icrc7_default_take_value: () -> (opt nat) query;
   icrc7_description: () -> (opt text) query;
   icrc7_logo: () -> (opt text) query;
   icrc7_max_memo_size: () -> (opt nat) query;
   icrc7_max_query_batch_size: () -> (opt nat) query;
   icrc7_max_take_value: () -> (opt nat) query;
   icrc7_max_update_batch_size: () -> (opt nat) query;
   icrc7_name: () -> (text) query;
   icrc7_owner_of: (OwnerOfRequest) -> (OwnerOfResponse) query;
   icrc7_permitted_drift: () -> (opt nat) query;
   icrc7_supply_cap: () -> (opt nat) query;
   icrc7_symbol: () -> (text) query;
   icrc7_token_metadata: (vec nat) ->
    (vec opt vec record {
                   text;
                   Value;
                 }) query;
   icrc7_tokens: (opt nat, opt nat) -> (vec nat) query;
   icrc7_tokens_of: (Account, opt nat, opt nat) -> (vec nat) query;
   icrc7_total_supply: () -> (nat) query;
   icrc7_transfer: (vec TransferArgs) -> (vec opt TransferResult);
   icrc7_tx_window: () -> (opt nat) query;
   is_library_unique: (Account, text) -> (bool) query;
   is_username_unique: (text) -> (bool) query;
   mint_nft: (Account, MintNFTRequest) -> (NatResult);
   revoke_authorization: (principal) -> (BoolResult);
   update_downloads: (nat, nat32) -> (BoolResult);
 };
type PropertyShared = 
 record {
   immutable: bool;
   name: text;
   value: CandyShared;
 };
type PrincipalsResult = 
 variant {
   err: text;
   ok: vec principal;
 };
type OwnerOfResponse = vec opt Account__1;
type OwnerOfRequest = vec nat;
type NatResult = 
 variant {
   err: text;
   ok: nat;
 };
type NFTInput = 
 variant {
   Array: vec CandyShared;
   Blob: blob;
   Bool: bool;
   Bytes: vec nat8;
   Class: vec PropertyShared;
   Float: float64;
   Floats: vec float64;
   Int: int;
   Int16: int16;
   Int32: int32;
   Int64: int64;
   Int8: int8;
   Ints: vec int;
   Map: vec record {
              text;
              CandyShared;
            };
   Nat: nat;
   Nat16: nat16;
   Nat32: nat32;
   Nat64: nat64;
   Nat8: nat8;
   Nats: vec nat;
   Option: opt CandyShared;
   Principal: principal;
   Set: vec CandyShared;
   Text: text;
   ValueMap: vec record {
                   CandyShared;
                   CandyShared;
                 };
 };
type MintNFTRequest = 
 record {
   audio_identifier: text;
   audio_provider: text;
   audio_provider_spec: vec record {
                              NFTInput;
                              NFTInput;
                            };
   bpm: nat32;
   creator_name: text;
   description: text;
   duration: nat32;
   genre: text;
   library_id: LibraryID;
   music_key: text;
   name: text;
 };
type LibraryID__1 = text;
type LibraryID = text;
type Library = 
 record {
   creator_name: text;
   description: text;
   library_id: LibraryID;
   name: text;
   nft_ids: vec nat;
   owner: Account__2;
   thumbnail: text;
 };
type GetTransactionsResult__1 = 
 record {
   archived_blocks: vec ArchivedTransactionResponse;
   blocks: vec record {
                 block: Value__2;
                 id: nat;
               };
   log_length: nat;
 };
type GetTransactionsResult = 
 record {
   archived_blocks: vec ArchivedTransactionResponse;
   blocks: vec record {
                 block: Value__2;
                 id: nat;
               };
   log_length: nat;
 };
type GetTransactionsFn = func (vec TransactionRange__1) ->
                          (GetTransactionsResult__1) query;
type GetArchivesResultItem = 
 record {
   canister_id: principal;
   end: nat;
   start: nat;
 };
type GetArchivesResult = vec GetArchivesResultItem;
type GetArchivesArgs = record {from: opt principal;};
type DataCertificate = 
 record {
   certificate: blob;
   hash_tree: blob;
 };
type CreateUserRequest = 
 record {
   email: text;
   image: text;
   name: text;
 };
type CreateLibraryRequest = 
 record {
   creator_name: text;
   description: text;
   name: text;
   owner: Account__2;
   thumbnail: text;
 };
type CandyShared = 
 variant {
   Array: vec CandyShared;
   Blob: blob;
   Bool: bool;
   Bytes: vec nat8;
   Class: vec PropertyShared;
   Float: float64;
   Floats: vec float64;
   Int: int;
   Int16: int16;
   Int32: int32;
   Int64: int64;
   Int8: int8;
   Ints: vec int;
   Map: vec record {
              text;
              CandyShared;
            };
   Nat: nat;
   Nat16: nat16;
   Nat32: nat32;
   Nat64: nat64;
   Nat8: nat8;
   Nats: vec nat;
   Option: opt CandyShared;
   Principal: principal;
   Set: vec CandyShared;
   Text: text;
   ValueMap: vec record {
                   CandyShared;
                   CandyShared;
                 };
 };
type BoolResult = 
 variant {
   err: text;
   ok: bool;
 };
type BlockType = 
 record {
   block_type: text;
   url: text;
 };
type BalanceOfResponse = vec nat;
type BalanceOfRequest = vec Account__1;
type ArchivedTransactionResponse = 
 record {
   args: vec TransactionRange__1;
   callback: GetTransactionsFn;
 };
type Account__2 = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
type Account__1 = 
 record {
   owner: principal;
   subaccount: opt blob;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : () -> Soodio
